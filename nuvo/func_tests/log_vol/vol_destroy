#!/bin/bash

# Copyright 2019 Tad Lebeck
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


TEST_NAME="VOL DESTROY"

if [ "$#" -ne 6 ] ; then
    echo "vol_destroy nuvo_vm_cmd num_devices num_parcels parcel_size percent_used percent_to_write"
    echo "USAGE: num_devices is number of devices"
    echo "USAGE: num_parcels is parcels per device"
    echo "USAGE: parcel_size is in MB"
    echo "USAGE: percent used is lun size as percentage of parcel space"
    echo "USAGE: percent_to_write percent to of allocated size to write"
    exit 1
fi

NUVO_VM=$1
PARAM_NUM_DEVICES=$2
PARAM_NUM_PARCELS=$3
PARAM_PARCEL_SIZE=$4
PARAM_PERCENT_USED=$5
PARAM_PERCENT_TO_WRITE=$6

size_of_parcel=$(expr $PARAM_PARCEL_SIZE \* 1024 \* 1024)
size_of_device=$(expr $PARAM_NUM_PARCELS \* $size_of_parcel + 16 \* 1024 \* 1024)

# setup the cluster
source ./fake_cluster $NUVO_VM
fake_cluster_create 1 $PARAM_NUM_DEVICES $size_of_device $size_of_parcel

allocated_space_mb=$(expr $PARAM_NUM_DEVICES \* $PARAM_NUM_PARCELS \* $PARAM_PARCEL_SIZE)
lun_size=$(expr $allocated_space_mb \* $PARAM_PERCENT_USED / 100 \* 1024 \* 1024 )


# now create and use a volume
ROOT_DEVICE_UUID=${DEV_UUIDS[0]}
VOL_SERVER=${DEV_SERVER[$ROOT_DEVICE_UUID]}
fake_cluster_create_vol $VOL_SERVER $ROOT_DEVICE_UUID $lun_size
VOL_UUID=${VOL_UUIDS[0]}

fake_cluster_grow_volume_percent $VOL_UUID 100

# export the active lun
fake_cluster_export_active $VOL_UUID

# ----------------------------------------------------------------------
# now I can do some test stuff
NUVOVOL=$(fake_cluster_active_path $VOL_UUID)

fake_cluster_vol_manifest $VOL_UUID gc_rand_manifest_final_short.png true
fake_cluster_unexport_active $VOL_UUID
fake_cluster_close_vol $VOL_UUID

fake_cluster_debug_trigger 1 debug-trigger --trigger "vol_destroy" --error-type 301 --return-code -10 --repeat-cnt 1 --skip-cnt 0
fake_cluster_destroy_vol $VOL_UUID true
fake_cluster_destroy_vol $VOL_UUID
# cluster tear-down is handled in finish
