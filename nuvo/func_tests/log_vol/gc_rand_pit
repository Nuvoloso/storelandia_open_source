#!/bin/bash

# Copyright 2019 Tad Lebeck
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


TEST_NAME="GC RAND PIT"

if [ "$#" -ne 6 ] ; then
    echo "gc_rand_pit nuvo_vm_cmd num_devices num_parcels parcel_size percent_used percent_to_write"
    echo "USAGE: num_devices is number of devices"
    echo "USAGE: num_parcels is parcels per device"
    echo "USAGE: parcel_size is in MB"
    echo "USAGE: percent used is lun size as percentage of parcel space"
    echo "USAGE: percent_to_write percent to of allocated size to write"
    exit 1
fi

NUVO_VM=$1
PARAM_NUM_DEVICES=$2
PARAM_NUM_PARCELS=$3
PARAM_PARCEL_SIZE=$4
PARAM_PERCENT_USED=$5
PARAM_PERCENT_TO_WRITE=$6

size_of_parcel=$(expr $PARAM_PARCEL_SIZE \* 1024 \* 1024)
size_of_device=$(expr $PARAM_NUM_PARCELS \* $size_of_parcel + 16 \* 1024 \* 1024)

# setup the cluster
source ./fake_cluster $NUVO_VM
fake_cluster_create 1 $PARAM_NUM_DEVICES $size_of_device $size_of_parcel

allocated_space_mb=$(expr $PARAM_NUM_DEVICES \* $PARAM_NUM_PARCELS \* $PARAM_PARCEL_SIZE)
lun_size=$(expr $allocated_space_mb \* $PARAM_PERCENT_USED / 100 \* 1024 \* 1024 )


# now create and use a volume
ROOT_DEVICE_UUID=${DEV_UUIDS[0]}
VOL_SERVER=${DEV_SERVER[$ROOT_DEVICE_UUID]}
fake_cluster_create_vol $VOL_SERVER $ROOT_DEVICE_UUID $lun_size
VOL_UUID=${VOL_UUIDS[0]}

fake_cluster_grow_volume_percent $VOL_UUID 100

# export the active lun
fake_cluster_export_active $VOL_UUID

# create two pits

# ----------------------------------------------------------------------
# now I can do some test stuff
NUVOVOL=$(fake_cluster_active_path $VOL_UUID)

io_step_size=$(expr 20)

declare -a PIT_UUID
declare -a PIT_SEEDS

function create_test_pit() {
    local pit_i=$1
    PIT_SEEDS[$pit_i]=$RANDOM
    fio --name=test --verify=crc32c --rw=randwrite --size=$lun_size --io_size=20M --ioengine=libaio --iodepth=1 --bs=4K --direct=1 --numjobs=1 --unlink=0 --filename=$NUVOVOL --randseed ${PIT_SEEDS[$pit_i]}
    sync
    PIT_UUID[$pit_i]=$( uuidgen )
    fake_cluster_pause_io $VOL_UUID
    fake_cluster_create_pit $VOL_UUID ${PIT_UUID[$pit_i]}
    fake_cluster_resume_io $VOL_UUID
}

function check_test_pit() {
    local pit_id=$1
    local pit_uuid=${PIT_UUID[$pit_id]}
    fake_cluster_export_pit $VOL_UUID $pit_uuid
    local pit_name=$(fake_cluster_pit_path $pit_uuid)
    fio --name=test --verify_only --verify=crc32c --rw=randread --size=$lun_size --io_size=20M --ioengine=libaio --iodepth=1 --bs=4K --direct=1 --numjobs=1 --unlink=0 --filename=$pit_name --randseed ${PIT_SEEDS[$pit_id]}
    fake_cluster_unexport_pit $pit_uuid
}
dd if=/dev/urandom of=$NUVOVOL seek=0 count=5 conv=notrunc bs=4096 oflag=direct
NUM_PITS=3
for i in $(seq 1 $NUM_PITS) ; do
    create_test_pit $i
done

fake_cluster_unexport_active $VOL_UUID
fake_cluster_close_vol $VOL_UUID
fake_cluster_open_vol $VOL_UUID
fake_cluster_export_active $VOL_UUID
for i in $(seq 1 $NUM_PITS) ; do
    check_test_pit $i
done

total_data=$(expr $allocated_space_mb \* $PARAM_PERCENT_TO_WRITE / 100 + $io_step_size - 1)
num_iters=$(expr $total_data / $io_step_size)

pit_to_replace=0

for i in $(seq -f "%05g" 1 $num_iters) ; do
    # One of these rotates 1, 2, 3 ... the other does random
    #pit_to_replace=$(expr $(expr $pit_to_replace % $NUM_PITS ) + 1)
    pit_to_replace=$(expr 1 + $RANDOM % $NUM_PITS)

    check_test_pit $pit_to_replace
    fake_cluster_delete_pit $VOL_UUID ${PIT_UUID[$pit_to_replace]}
    create_test_pit $pit_to_replace
    fake_cluster_list_pits $VOL_UUID

    fake_cluster_vol_manifest $VOL_UUID gc_rand_pit_manifest_${i}.png
    fake_cluster_vol_manifest $VOL_UUID gc_rand_pit_manifest_short_${i}.png true

    # copy the file to a tmp and then swap over a single location for live watching ion browser.
    cp gc_rand_pit_manifest_${i}.png gc_rand_pit_manifest.png.tmp
    mv gc_rand_pit_manifest.png.tmp gc_rand_pit_manifest.png
done
fake_cluster_vol_manifest $VOL_UUID gc_rand_pit_manifest_final_short.png true

fake_cluster_unexport_active $VOL_UUID
fake_cluster_close_vol $VOL_UUID
fake_cluster_open_vol $VOL_UUID
fake_cluster_export_active $VOL_UUID
for i in $(seq 1 $NUM_PITS) ; do
    check_test_pit $i
done
# cluster tear-down is handled in finish
